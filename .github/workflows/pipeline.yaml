name: CI Pipiline
on:
  push:
    branches:
      - master
  workflow_dispatch:
jobs:
  install_mariadb:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Connect to remote server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          proxy_host: ${{ secrets.JUMP_HOST }}
          proxy_port: ${{ secrets.JUMP_PORT }}
          proxy_username: ${{ secrets.JUMP_USER }}
          proxy_password: ${{ secrets.JUMP_PASSWORD }}
          script: |
            cd pods/ansible
            ansible-playbook -i inv.yaml mariadb.yaml -e name_db=${{ secrets.DB_NAME }} -e user_db=${{ secrets.DB_USER }} -e pass_db=${{ secrets.DB_PASS }} -l mariadb -u root
            
  ansible_notification:
    name: Docker notification
    runs-on: ubuntu-latest
    needs: install_mariadb
    steps:
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: project-notify
        SLACK_COLOR: ${{ job.status }}
        SLACK_MESSAGE: "MariaDB install and database create successfully!"
        SLACK_TITLE: MariaDB install status
        SLACK_USERNAME: GitHub
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  
  build_test_push_image:
    name: Build, Test and Push Docker image
    runs-on: ubuntu-latest
    needs: ansible_notification
    outputs:
        tag: ${{ steps.tag_version.outputs.new_tag }}
        version: ${{ steps.tag_version.outputs.new_version }}
    permissions:
      packages: write
      contents: write
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: jfrog.it-academy.by
          username: ${{ secrets.JFROG_USER }}
          password: ${{ secrets.JFROG_PASS }}
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008
      - name: Build the Docker image
        run: docker build --file ./Dockerfile --tag jfrog.it-academy.by/public/nginx-fpm-wordpress:${{ steps.tag_version.outputs.new_tag }} .
      - name: Run the WordPress App
        run: docker run --name wordpress -p 8080:8080 -d jfrog.it-academy.by/public/nginx-fpm-wordpress:${{ steps.tag_version.outputs.new_tag }}
      - name: Setup Curl
        run: sudo apt install curl
      - name: Test Request
        run: curl http://localhost:8080 -v
      - name: Non-root check for Docker image
        uses: wetransform/gha-docker-nonroot@v1.0.3
        with:
          image-ref: jfrog.it-academy.by/public/nginx-fpm-wordpress:${{ steps.tag_version.outputs.new_tag }}
          fail-for-root: true
      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: ./
          push: true
          tags: jfrog.it-academy.by/public/nginx-fpm-wordpress:${{ steps.tag_version.outputs.new_tag }}

  docker_notification:
    name: Docker notification
    needs: build_test_push_image
    runs-on: ubuntu-latest
    outputs:
        tag: ${{ needs.build_test_push_image.outputs.tag }}
        version: ${{ needs.build_test_push_image.outputs.version }}
    steps:
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: project-notify
        SLACK_COLOR: ${{ job.status }}
        SLACK_MESSAGE: "Docker image test and ready jfrog.it-academy.by/public/nginx-fpm-wordpress:${{ needs.build_test_push_image.outputs.tag }}"
        SLACK_TITLE: Docker image build status
        SLACK_USERNAME: GitHub
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  update_helm_repo:
    name: Update helm repository
    needs: docker_notification
    runs-on: ubuntu-latest
    outputs:
        tag: ${{ needs.docker_notification.outputs.tag }}
        version: ${{ needs.docker_notification.outputs.version }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          repository: hilinsky/helm-project
          token: ${{ secrets.GIT_TOKEN }}
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          helm-version: v3.8.0
      - name: Update Chart.yaml and values.yaml
        run: |
          sed -i "s/^appVersion:.*$/appVersion: ${{ needs.docker_notification.outputs.version }}/" ./helm-sources/wordpress/Chart.yaml
          sed -i "s/^version:.*$/version: ${{ needs.docker_notification.outputs.version }}/" ./helm-sources/wordpress/Chart.yaml
          sed -i "s/^ *tag:.*$/  tag: \"${{ needs.docker_notification.outputs.tag }}\"/" ./helm-sources/wordpress/values.yaml
      - name: Helm Check
        uses: igabaydulin/helm-check-action@master
        env:
          CHART_LOCATION: ./helm-sources/wordpress/
          CHART_VALUES: ./helm-sources/wordpress/values.yaml
      - name: Lint Helm Charts
        run: |
          helm lint ./helm-sources/wordpress/
      - name: Package Helm charts
        run: |
          helm package ./helm-sources/wordpress
          mv wordpress-${{ needs.docker_notification.outputs.version }}.tgz ./helm-releases/
      - name: Update Helm repo index
        run: |
          helm repo index . --url https://hilinsky.github.io/helm-project/
      - name: Commit and push changes
        run: |
          git config --local user.email "victorhilinsky@gmail.com"
          git config --local user.name "Victor Trush"
          git add .
          git commit -m "Add App ${{ needs.docker_notification.outputs.version }}-version" || echo "No changes to commit"
          git push origin master

  helm_notification:
    name: Helm notification
    needs: update_helm_repo
    runs-on: ubuntu-latest
    steps:
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: project-notify
        SLACK_COLOR: ${{ job.status }}
        SLACK_MESSAGE: "Helm package test and ready https://github.com/hilinsky/helm-project/blob/master/helm-releases/wordpress-${{ needs.update_helm_repo.outputs.version }}.tgz"
        SLACK_TITLE: Helm package status
        SLACK_USERNAME: GitHub
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
